import getpass
import itertools
import os
from test.unit.cli.scs_mock import scs_mock
from typing import Any
from unittest.mock import Mock

import click
import pytest

from exasol.nb_connector.ai_lab_config import AILabConfig as CKey
from exasol.nb_connector.cli.param_wrappers import (
    ScsArgument,
    ScsOption,
    ScsParam,
    ScsSecretOption,
)


def select_atts(obj: Any, atts: dict[str, Any]) -> dict[str, Any]:
    return {k: getattr(obj, k) for k in atts}


def get_click_params(scs_arg: ScsParam):
    return scs_arg.decorate(lambda: None).__click_params__


def test_scs_argument():
    testee = ScsArgument("arg_name", envvar="KWARG_ENVVAR")
    expected = {
        "name": "arg_name",
        "scs_key": None,
        "_kwargs": {"envvar": "KWARG_ENVVAR"},
    }
    assert expected == select_atts(testee, expected)
    scs = Mock()
    assert testee.needs_entry(scs) == False
    assert testee.displayed_value(scs) is None

    # verify parameters generated by the decorator
    params = get_click_params(testee)
    assert len(params) == 1
    expected = {
        "name": "arg_name",
        "envvar": "KWARG_ENVVAR",
    }
    assert expected == select_atts(params[0], expected)


def test_scs_option():
    testee = ScsOption(
        "--cli-option",
        "arg_name",
        scs_key=CKey.saas_database_name,
        scs_alternative_key=CKey.saas_database_id,
        scs_required=False,
        get_default_from="other_arg",
        envvar="KWARG_ENVVAR",
        metavar="NAME",
        type=str,
        default="Robert",
        help="SaaS database name",
    )
    expected = {
        "scs_key": CKey.saas_database_name,
        "scs_alternative_key": CKey.saas_database_id,
        "scs_required": False,
        "get_default_from": "other_arg",
    }
    assert expected == select_atts(testee, expected)

    params = get_click_params(testee)
    assert len(params) == 1
    expected = {
        "name": "arg_name",
        "envvar": "KWARG_ENVVAR",
        "metavar": "NAME",
        "type": click.STRING,
        "default": "Robert",
        "help": "SaaS database name",
    }
    assert expected == select_atts(params[0], expected)


@pytest.mark.parametrize(
    "arg, expected",
    [
        ("--opt/--no-opt", "--opt"),
        ("--flag", "--flag"),
    ],
)
def test_cli_option(arg, expected):
    testee = ScsOption(arg)
    assert testee.cli_option() == expected
    assert testee.cli_option(full=True) == arg


@pytest.mark.parametrize(
    "args, expected",
    [
        (("--opt-name",), "opt_name"),
        (("--opt", "arg_name"), "arg_name"),
        (("--opt-name/--no-opt-name",), "opt_name"),
    ],
)
def test_arg_name(args, expected):
    testee = ScsOption(*args)
    assert testee.arg_name == expected


@pytest.mark.parametrize(
    "has_key, scs_content, expected",
    [
        (False, False, None),
        (False, "sample value", None),
        (True, False, None),
        (True, "sample value", "sample value"),
    ],
)
def test_displayed_value(has_key, scs_content, expected):
    """
    Parameters:

    has_key: whether the current testee has attribute scs_key != None

    scs_content: whether the scs contains a value for the key

    expected: expected result when calling testee.value(scs), i.e. retrieving
        the actual value currently stored in the SCS for the option
        represented by the testee.
    """

    key = CKey.saas_url
    scs = scs_mock()
    if scs_content:
        scs.save(key, "sample value")
    scs_key = key if has_key else None
    testee = ScsOption("--opt", scs_key=scs_key)
    assert testee.displayed_value(scs) == expected


@pytest.mark.parametrize(
    "key, alt_key, required, value, alt_value",
    itertools.product([False, True], repeat=5),
)
def test_needs_entry(key, required, alt_key, value, alt_value):
    key1 = CKey.saas_database_id
    key2 = CKey.saas_database_name
    scs_key = key1 if key else None
    scs_alt_key = key2 if alt_key else None
    scs = scs_mock()
    if value:
        scs.save(key1, "some value")
    if alt_value:
        scs.save(key2, "some alternative value")
    testee = ScsOption(
        "--opt",
        scs_key=scs_key,
        scs_required=required,
        scs_alternative_key=scs_alt_key,
    )
    expected = key and required and not (value or (alt_key and alt_value))
    vector = {
        "key": key,
        "required": required,
        "alt_key": alt_key,
        "value": value,
        "alt_value": alt_value,
        "expected": expected,
    }

    assert testee.needs_entry(scs) == expected, f"{vector}"


@pytest.mark.parametrize(
    "metavar",
    [
        None,
        "PAT",
    ],
)
def test_secret_option(metavar):
    kwargs = {"metavar": "PAT"} if metavar else {}
    testee = ScsSecretOption(
        "--opt",
        "ENV_VAR",
        "Some prompt",
        CKey.db_password,
        **kwargs,
    )
    scs = scs_mock()
    scs.save(CKey.db_password, "sample value")
    assert testee.displayed_value(scs) == "****"
    params = get_click_params(testee)
    assert len(params) == 1
    expected_metavar = metavar or "PASSWORD"
    expected = {
        "metavar": expected_metavar,
        "type": click.BOOL,
        "is_flag": True,
        "help": "Some prompt  [env var: ENV_VAR]",
    }
    assert expected == select_atts(params[0], expected)


@pytest.fixture
def sample_secret():
    return ScsSecretOption("--opt", "ENV_VAR", "prompt", CKey.db_password)


def test_get_secret_from_env(monkeypatch, sample_secret, capsys):
    expected = "password from env"
    monkeypatch.setitem(os.environ, "ENV_VAR", expected)
    assert sample_secret.get_secret(interactive=True) == expected
    assert "Reading --opt from environment variable" in capsys.readouterr().out


def test_get_secret_wo_interaction(monkeypatch, sample_secret):
    mock = Mock(return_value="interactive password")
    monkeypatch.setattr(getpass, "getpass", mock)
    assert sample_secret.get_secret(interactive=False) == ""


def test_get_secret_interactive(monkeypatch, sample_secret):
    expected = "interactive password"
    monkeypatch.setattr(getpass, "getpass", Mock(return_value=expected))
    assert sample_secret.get_secret(interactive=True) == expected
